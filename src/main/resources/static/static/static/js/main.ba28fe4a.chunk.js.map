{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Search","TabPane","App","useState","search","hits","loading","setLoading","resultReadyStatus","setResultReadyStatus","status","message","errors","setErrors","bank","scheme","type","cardData","setCardData","start","limit","size","payload","stats","setStats","handleControlChange","e","target","name","value","searchOutput","className","title","hitsOutput","console","log","pagination","dataSource","columns","dataIndex","key","tab","placeholder","enterButton","onSearch","event","cardNumber","trim","replace","isNaN","Number","axios","get","then","response","data","catch","err","success","onChange","onClick","params","Object","entries","map","item","index","number","sort","a","b","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ba28fe4a.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport axios from 'axios';\r\nimport { Input, Statistic, Card, Tabs, Button, Table } from \"antd\";\r\n\r\nimport \"./App.css\";\r\n\r\nconst { Search } = Input;\r\nconst { TabPane } = Tabs;\r\n\r\nfunction App() {\r\n  const [loading, setLoading] = useState({\r\n    search: false,\r\n    hits: false\r\n  });\r\n  const [resultReadyStatus, setResultReadyStatus] = useState({\r\n    search: false,\r\n    hits: false\r\n  })\r\n  const [errors, setErrors] = useState({\r\n    hits: {\r\n      status: false,\r\n      message: \"\"\r\n    },\r\n    search: {\r\n      status: false,\r\n      message: \"\"\r\n    }\r\n  });\r\n  const [cardData, setCardData] = useState({\r\n    bank: \"\",\r\n    scheme: \"\",\r\n    type: \"\"})\r\n\r\n  const [stats, setStats] = useState({\r\n    start: 1,\r\n    limit: 5,\r\n    size: 0,\r\n    payload: []\r\n  })\r\n\r\n\r\n  const handleSearch = (value, event) => {\r\n    const cardNumber = value.trim().replace(\" \", \"\");\r\n    if (!isNaN(Number(cardNumber))) {\r\n      setLoading({...loading, search: true});\r\n      axios\r\n      .get(\"/card-scheme/verify/\" + cardNumber)\r\n      .then(response => {\r\n        const { search } = errors;\r\n        search.status = false;\r\n        search.message = '';\r\n        const bank = response.data.payload.bank;\r\n        const scheme = response.data.payload.scheme;\r\n        const type = response.data.payload.type;\r\n        setLoading({...loading, search: false});\r\n        setCardData({bank, scheme, type});\r\n        setResultReadyStatus({...resultReadyStatus, search: true});\r\n      })\r\n      .catch(err => {\r\n        const { search } = errors;\r\n        search.status = !err.response.data.success;\r\n        search.message = err.response.data.message;\r\n        console.log(errors);\r\n        setErrors({...errors, search});\r\n        setLoading({...loading, search: false});\r\n        setResultReadyStatus({...resultReadyStatus, search: true});\r\n        console.log(err.response)\r\n      })\r\n    }\r\n  }\r\n\r\n  const handleControlChange = e => {\r\n    setStats({ ...stats, [e.target.name]: e.target.value });\r\n  }\r\n\r\n  const getNumberOfHits = () => {\r\n    setLoading({...loading, hits: true});\r\n    axios\r\n      .get('/card-scheme/stats', {\r\n        params: {\r\n          start: stats.start,\r\n          limit: stats.limit\r\n        }\r\n      })\r\n      .then(response => {\r\n        const { hits } = errors;\r\n        hits.status = false;\r\n        hits.message = '';\r\n        const start = response.data.start;\r\n        const limit = response.data.limit;\r\n        const size = response.data.size;\r\n        const payload = Object.entries(response.data.payload).map((item, index) => {\r\n          return {\r\n            key: index + 1,\r\n            number: item[0],\r\n            hits: item[1]\r\n          }\r\n        }).sort((a, b) => b.hits - a.hits);\r\n        setStats({start, limit, size, payload});\r\n        setLoading({...loading, hits: false});\r\n        setResultReadyStatus({...resultReadyStatus, hits: true});\r\n      })\r\n      .catch(err => {\r\n        const { hits } = errors;\r\n        hits.status = !err.response.data.success;\r\n        hits.message = err.response.data.message;\r\n        console.log(errors);\r\n        setErrors({...errors, hits});\r\n        setLoading({...loading, hits: false});\r\n        setResultReadyStatus({...resultReadyStatus, hits: true});\r\n        console.log(err.response);\r\n      })\r\n  }\r\n\r\n  const columns = [\r\n    {\r\n      title: 'Card Number',\r\n      dataIndex: 'number',\r\n      key: 'number',\r\n    },\r\n    {\r\n      title: 'Number of Hits',\r\n      dataIndex: 'hits',\r\n      key: 'hits'\r\n    }\r\n  ];\r\n\r\n  let searchOutput = \"\";\r\n  if (resultReadyStatus.search && !loading.search) {\r\n    const { search } = errors;\r\n    if (search.status) {\r\n      searchOutput = (<p className=\"error\">{search.message}</p>);\r\n    } else {\r\n      searchOutput = (<div className=\"statistics\">\r\n      <Card>\r\n        <Statistic title=\"BANK\" value={cardData.bank} />\r\n      </Card>\r\n\r\n      <Card>\r\n        <Statistic title=\"SCHEME\" value={cardData.scheme} />\r\n      </Card>\r\n      <Card>\r\n        <Statistic title=\"TYPE\" value={cardData.type} />\r\n      </Card>\r\n    </div>)\r\n    }\r\n  }\r\n\r\n  let hitsOutput = \"\";\r\n  if (resultReadyStatus.hits && !loading.hits) {\r\n    const { hits } = errors;\r\n    console.log(hits);\r\n    if (hits.status) {\r\n      hitsOutput = (<p className=\"error\">{hits.message}</p>);\r\n    } else {\r\n      hitsOutput = (<div>\r\n        <Table pagination={false} dataSource={stats.payload} columns={columns} />\r\n        <div className=\"summary\"><strong>Summary:</strong></div>\r\n        <div className=\"summary-details\">\r\n          <Statistic title=\"Start\" value={stats.start} />\r\n          <Statistic title=\"Limit\" value={stats.limit} />\r\n          <Statistic title=\"Size\" value={stats.size} />\r\n        </div>\r\n      </div>);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <main className=\"main\">\r\n        <h1>Every Information in one place...</h1>\r\n        <div className=\"card-container\">\r\n          <Tabs type=\"card\">\r\n            <TabPane tab=\"Verify Card Number\" key=\"1\">\r\n              <div className=\"search-container\">\r\n                <Search\r\n                  placeholder=\"Enter a card number\"\r\n                  loading={loading.search}\r\n                  size=\"large\"\r\n                  enterButton=\"Verify\"\r\n                  onSearch={handleSearch}\r\n                />\r\n              {/* {inValid && <p className=\"error\">must be a number containing 6 to 16 digits</p> } */}\r\n              </div>\r\n              {searchOutput}\r\n            </TabPane>\r\n            <TabPane tab=\"Get Number of Hits\" key=\"2\">\r\n              <div className=\"controls\">\r\n                <Input name=\"start\" size=\"large\" type=\"number\" placeholder=\"Enter Start\" onChange={handleControlChange} />\r\n                <Input name=\"limit\" size=\"large\" type=\"number\" placeholder=\"Enter Limit\" onChange={handleControlChange} />\r\n                <Button onClick={getNumberOfHits} type=\"primary\" size=\"large\" loading={loading.hits}>\r\n                  Get Hits\r\n                </Button>\r\n              </div>\r\n              {hitsOutput}\r\n            </TabPane>\r\n          </Tabs>\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}